Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    comment
    newline

Grammar

Rule 0     S' -> program
Rule 1     program -> headers procedures
Rule 2     procedures -> procedure procedures
Rule 3     procedures -> empty
Rule 4     procedure -> id lkey instructions rkey
Rule 5     instructions -> instruc instructions
Rule 6     instructions -> empty
Rule 7     instruc -> id operands point_comma
Rule 8     headers -> header headers
Rule 9     headers -> empty
Rule 10    header -> point id operands point_comma
Rule 11    operands -> operand comma operand
Rule 12    operands -> operand
Rule 13    operands -> empty
Rule 14    operand -> id
Rule 15    operand -> integer
Rule 16    operand -> float
Rule 17    operand -> string
Rule 18    operand -> lbrack id comma integer rbrack
Rule 19    operand -> lbrack integer rbrack
Rule 20    operand -> lbrack rbrack
Rule 21    empty -> <empty>

Terminals, with rules where they appear

comma                : 11 18
comment              : 
error                : 
float                : 16
id                   : 4 7 10 14 18
integer              : 15 18 19
lbrack               : 18 19 20
lkey                 : 4
newline              : 
point                : 10
point_comma          : 7 10
rbrack               : 18 19 20
rkey                 : 4
string               : 17

Nonterminals, with rules where they appear

empty                : 3 6 9 13
header               : 8
headers              : 1 8
instruc              : 5
instructions         : 4 5
operand              : 11 11 12
operands             : 7 10
procedure            : 2
procedures           : 1 2
program              : 0

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . headers procedures
    (8) headers -> . header headers
    (9) headers -> . empty
    (10) header -> . point id operands point_comma
    (21) empty -> .

    point           shift and go to state 1
    id              reduce using rule 21 (empty -> .)
    $end            reduce using rule 21 (empty -> .)

    header                         shift and go to state 2
    headers                        shift and go to state 3
    program                        shift and go to state 4
    empty                          shift and go to state 5

state 1

    (10) header -> point . id operands point_comma

    id              shift and go to state 6


state 2

    (8) headers -> header . headers
    (8) headers -> . header headers
    (9) headers -> . empty
    (10) header -> . point id operands point_comma
    (21) empty -> .

    point           shift and go to state 1
    id              reduce using rule 21 (empty -> .)
    $end            reduce using rule 21 (empty -> .)

    header                         shift and go to state 2
    empty                          shift and go to state 5
    headers                        shift and go to state 7

state 3

    (1) program -> headers . procedures
    (2) procedures -> . procedure procedures
    (3) procedures -> . empty
    (4) procedure -> . id lkey instructions rkey
    (21) empty -> .

    id              shift and go to state 10
    $end            reduce using rule 21 (empty -> .)

    procedures                     shift and go to state 9
    empty                          shift and go to state 11
    procedure                      shift and go to state 8

state 4

    (0) S' -> program .



state 5

    (9) headers -> empty .

    id              reduce using rule 9 (headers -> empty .)
    $end            reduce using rule 9 (headers -> empty .)


state 6

    (10) header -> point id . operands point_comma
    (11) operands -> . operand comma operand
    (12) operands -> . operand
    (13) operands -> . empty
    (14) operand -> . id
    (15) operand -> . integer
    (16) operand -> . float
    (17) operand -> . string
    (18) operand -> . lbrack id comma integer rbrack
    (19) operand -> . lbrack integer rbrack
    (20) operand -> . lbrack rbrack
    (21) empty -> .

    id              shift and go to state 18
    integer         shift and go to state 17
    float           shift and go to state 14
    string          shift and go to state 12
    lbrack          shift and go to state 15
    point_comma     reduce using rule 21 (empty -> .)

    operand                        shift and go to state 16
    empty                          shift and go to state 19
    operands                       shift and go to state 13

state 7

    (8) headers -> header headers .

    id              reduce using rule 8 (headers -> header headers .)
    $end            reduce using rule 8 (headers -> header headers .)


state 8

    (2) procedures -> procedure . procedures
    (2) procedures -> . procedure procedures
    (3) procedures -> . empty
    (4) procedure -> . id lkey instructions rkey
    (21) empty -> .

    id              shift and go to state 10
    $end            reduce using rule 21 (empty -> .)

    procedures                     shift and go to state 20
    empty                          shift and go to state 11
    procedure                      shift and go to state 8

state 9

    (1) program -> headers procedures .

    $end            reduce using rule 1 (program -> headers procedures .)


state 10

    (4) procedure -> id . lkey instructions rkey

    lkey            shift and go to state 21


state 11

    (3) procedures -> empty .

    $end            reduce using rule 3 (procedures -> empty .)


state 12

    (17) operand -> string .

    point_comma     reduce using rule 17 (operand -> string .)
    comma           reduce using rule 17 (operand -> string .)


state 13

    (10) header -> point id operands . point_comma

    point_comma     shift and go to state 22


state 14

    (16) operand -> float .

    point_comma     reduce using rule 16 (operand -> float .)
    comma           reduce using rule 16 (operand -> float .)


state 15

    (18) operand -> lbrack . id comma integer rbrack
    (19) operand -> lbrack . integer rbrack
    (20) operand -> lbrack . rbrack

    id              shift and go to state 25
    integer         shift and go to state 23
    rbrack          shift and go to state 24


state 16

    (11) operands -> operand . comma operand
    (12) operands -> operand .

    comma           shift and go to state 26
    point_comma     reduce using rule 12 (operands -> operand .)


state 17

    (15) operand -> integer .

    point_comma     reduce using rule 15 (operand -> integer .)
    comma           reduce using rule 15 (operand -> integer .)


state 18

    (14) operand -> id .

    point_comma     reduce using rule 14 (operand -> id .)
    comma           reduce using rule 14 (operand -> id .)


state 19

    (13) operands -> empty .

    point_comma     reduce using rule 13 (operands -> empty .)


state 20

    (2) procedures -> procedure procedures .

    $end            reduce using rule 2 (procedures -> procedure procedures .)


state 21

    (4) procedure -> id lkey . instructions rkey
    (5) instructions -> . instruc instructions
    (6) instructions -> . empty
    (7) instruc -> . id operands point_comma
    (21) empty -> .

    id              shift and go to state 27
    rkey            reduce using rule 21 (empty -> .)

    instruc                        shift and go to state 28
    empty                          shift and go to state 29
    instructions                   shift and go to state 30

state 22

    (10) header -> point id operands point_comma .

    point           reduce using rule 10 (header -> point id operands point_comma .)
    id              reduce using rule 10 (header -> point id operands point_comma .)
    $end            reduce using rule 10 (header -> point id operands point_comma .)


state 23

    (19) operand -> lbrack integer . rbrack

    rbrack          shift and go to state 31


state 24

    (20) operand -> lbrack rbrack .

    point_comma     reduce using rule 20 (operand -> lbrack rbrack .)
    comma           reduce using rule 20 (operand -> lbrack rbrack .)


state 25

    (18) operand -> lbrack id . comma integer rbrack

    comma           shift and go to state 32


state 26

    (11) operands -> operand comma . operand
    (14) operand -> . id
    (15) operand -> . integer
    (16) operand -> . float
    (17) operand -> . string
    (18) operand -> . lbrack id comma integer rbrack
    (19) operand -> . lbrack integer rbrack
    (20) operand -> . lbrack rbrack

    id              shift and go to state 18
    integer         shift and go to state 17
    float           shift and go to state 14
    string          shift and go to state 12
    lbrack          shift and go to state 15

    operand                        shift and go to state 33

state 27

    (7) instruc -> id . operands point_comma
    (11) operands -> . operand comma operand
    (12) operands -> . operand
    (13) operands -> . empty
    (14) operand -> . id
    (15) operand -> . integer
    (16) operand -> . float
    (17) operand -> . string
    (18) operand -> . lbrack id comma integer rbrack
    (19) operand -> . lbrack integer rbrack
    (20) operand -> . lbrack rbrack
    (21) empty -> .

    id              shift and go to state 18
    integer         shift and go to state 17
    float           shift and go to state 14
    string          shift and go to state 12
    lbrack          shift and go to state 15
    point_comma     reduce using rule 21 (empty -> .)

    operand                        shift and go to state 16
    empty                          shift and go to state 19
    operands                       shift and go to state 34

state 28

    (5) instructions -> instruc . instructions
    (5) instructions -> . instruc instructions
    (6) instructions -> . empty
    (7) instruc -> . id operands point_comma
    (21) empty -> .

    id              shift and go to state 27
    rkey            reduce using rule 21 (empty -> .)

    instruc                        shift and go to state 28
    empty                          shift and go to state 29
    instructions                   shift and go to state 35

state 29

    (6) instructions -> empty .

    rkey            reduce using rule 6 (instructions -> empty .)


state 30

    (4) procedure -> id lkey instructions . rkey

    rkey            shift and go to state 36


state 31

    (19) operand -> lbrack integer rbrack .

    point_comma     reduce using rule 19 (operand -> lbrack integer rbrack .)
    comma           reduce using rule 19 (operand -> lbrack integer rbrack .)


state 32

    (18) operand -> lbrack id comma . integer rbrack

    integer         shift and go to state 37


state 33

    (11) operands -> operand comma operand .

    point_comma     reduce using rule 11 (operands -> operand comma operand .)


state 34

    (7) instruc -> id operands . point_comma

    point_comma     shift and go to state 38


state 35

    (5) instructions -> instruc instructions .

    rkey            reduce using rule 5 (instructions -> instruc instructions .)


state 36

    (4) procedure -> id lkey instructions rkey .

    id              reduce using rule 4 (procedure -> id lkey instructions rkey .)
    $end            reduce using rule 4 (procedure -> id lkey instructions rkey .)


state 37

    (18) operand -> lbrack id comma integer . rbrack

    rbrack          shift and go to state 39


state 38

    (7) instruc -> id operands point_comma .

    id              reduce using rule 7 (instruc -> id operands point_comma .)
    rkey            reduce using rule 7 (instruc -> id operands point_comma .)


state 39

    (18) operand -> lbrack id comma integer rbrack .

    point_comma     reduce using rule 18 (operand -> lbrack id comma integer rbrack .)
    comma           reduce using rule 18 (operand -> lbrack id comma integer rbrack .)

